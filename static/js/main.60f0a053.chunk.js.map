{"version":3,"sources":["components/Header.js","components/MapboxGLMap.js","App.js","serviceWorker.js","index.js"],"names":["styles","height","width","padding","textAlign","fontSize","Header","style","position","permissionsNames","getAllPermissions","a","allPermissions","Promise","all","map","permissionName","navigator","permissions","query","name","permission","console","log","push","state","errorMessage","toString","MapboxGLMap","gyro","accl","useState","setMap","mapContainer","useRef","window","Gyroscope","frequency","addEventListener","x","y","z","start","error","Accelerometer","useEffect","mapboxgl","accessToken","process","initializeMap","Map","container","current","center","zoom","on","resize","id","ref","el","overflow","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"uLAEMA,G,MAAS,CACXC,OAAQ,OACRC,MAAO,QACPC,QAAS,OACTC,UAAW,SACXC,SAAU,SAWCC,EARA,WACX,OACI,yBAAKC,MAAOP,GACR,4C,8CCTNA,G,MAAS,CACbE,MAAO,OACPD,OAAQ,qBACRO,SAAU,aAINC,EAAmB,CACvB,cACA,OACA,OACA,SACA,aACA,UACA,uBACA,gBACA,YACA,gBAGIC,EAAiB,uCAAG,4BAAAC,EAAA,6DAClBC,EAAiB,GADC,SAGlBC,QAAQC,IACZL,EAAiBM,IAAjB,uCAAqB,WAAMC,GAAN,eAAAL,EAAA,+EAEQM,UAAUC,YAAYC,MAAM,CAACC,KAAMJ,IAF3C,OAEXK,EAFW,OAGfC,QAAQC,IAAIF,GACZT,EAAeY,KAAK,CAACR,iBAAgBS,MAAOJ,EAAWI,QAJxC,gDAOfb,EAAeY,KAAK,CAACR,iBAAgBS,MAAO,QAASC,aAAc,KAAEC,aAPtD,yDAArB,wDAJsB,gCAejBf,GAfiB,2CAAH,qDAgERgB,EA9CK,WAAO,IAIrBC,EAAMC,EAJc,EACFC,mBAAS,MADP,mBACjBhB,EADiB,KACZiB,EADY,KAElBC,EAAeC,iBAAO,MAG5B,KACEL,EAAO,IAAIM,OAAOC,UAAU,CAACC,UAAW,MACnCC,iBAAiB,WAAW,WAC/BhB,QAAQC,IAAI,iBAAkBM,EAAKU,EAAGV,EAAKW,EAAGX,EAAKY,MAErDZ,EAAKa,QACL,MAAMC,GAAQrB,QAAQC,IAAI,uBAE5B,KACEO,EAAO,IAAIK,OAAOS,cAAc,CAACP,UAAW,MACvCC,iBAAiB,WAAW,WAC/BhB,QAAQC,IAAI,qBAAsBO,EAAKS,EAAGT,EAAKU,EAAGV,EAAKW,MAEzDX,EAAKY,QACL,MAAMC,GAAQrB,QAAQC,IAAI,2BAwB5B,OAtBAD,QAAQC,IAAIO,EAAMD,GAElBgB,qBAAU,WACRC,IAASC,YAAcC,yFACvB,IAAMC,EAAa,uCAAG,iCAAAtC,EAAA,6DAASqB,EAAT,EAASA,OAAQC,EAAjB,EAAiBA,aAAjB,SACdvB,IADc,QAEdK,EAAM,IAAI+B,IAASI,IAAI,CAC3BC,UAAWlB,EAAamB,QACxB7C,MAAO,qCACP8C,OAAQ,CAAC,UAAW,WACpBC,KAAM,MAGJC,GAAG,QAAQ,WACbvB,EAAOjB,GACPA,EAAIyC,YAXc,2CAAH,sDAedzC,GAAKkC,EAAc,CAAEjB,SAAQC,mBACjC,CAAClB,IAEG,yBAAK0C,GAAG,MAAMC,IAAK,SAAAC,GAAE,OAAK1B,EAAamB,QAAUO,GAAKpD,MAAOP,KCjFhEA,EAAS,CACb4D,SAAS,UAYIC,MATf,WACE,OACE,yBAAKtD,MAAOP,GACV,kBAAC,EAAD,MACA,kBAAC,EAAD,QCAc8D,QACW,cAA7B3B,OAAO4B,SAASC,UAEe,UAA7B7B,OAAO4B,SAASC,UAEhB7B,OAAO4B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBrD,WACrBA,UAAUsD,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAjC,GACLrB,QAAQqB,MAAMA,EAAMkC,a","file":"static/js/main.60f0a053.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst styles = {\r\n    height: '60px',\r\n    width: '100vw',\r\n    padding: '10px',\r\n    textAlign: 'center',\r\n    fontSize: '30px',\r\n  };\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div style={styles}>\r\n            <header>KART??</header>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport mapboxgl from \"mapbox-gl\";\r\nimport \"mapbox-gl/dist/mapbox-gl.css\";\r\n\r\nconst styles = {\r\n  width: \"100%\",\r\n  height: \"calc(100vh - 80px)\",\r\n  position: \"absolute\"\r\n};\r\n\r\n\r\nconst permissionsNames = [\r\n  \"geolocation\",\r\n  \"push\",\r\n  \"midi\",\r\n  \"camera\",\r\n  \"microphone\",\r\n  \"speaker\",\r\n  \"ambient-light-sensor\",\r\n  \"accelerometer\",\r\n  \"gyroscope\",\r\n  \"magnetometer\",\r\n]\r\n\r\nconst getAllPermissions = async () => {\r\n  const allPermissions = []\r\n  // We use Promise.all to wait until all the permission queries are resolved\r\n  await Promise.all(\r\n    permissionsNames.map(async permissionName => {\r\n        try {\r\n          let permission = await navigator.permissions.query({name: permissionName})\r\n          console.log(permission)\r\n          allPermissions.push({permissionName, state: permission.state})\r\n        }\r\n        catch(e){\r\n          allPermissions.push({permissionName, state: 'error', errorMessage: e.toString()})\r\n        }\r\n    })\r\n  )\r\n  return allPermissions\r\n}\r\n\r\nconst MapboxGLMap = () => {\r\n  const [map, setMap] = useState(null);\r\n  const mapContainer = useRef(null);\r\n  \r\n  let gyro, accl;\r\n  try {\r\n    gyro = new window.Gyroscope({frequency: 60});\r\n    gyro.addEventListener('reading', () => {\r\n      console.log(\"Gyroscope xyz:\", gyro.x, gyro.y, gyro.z);\r\n    });\r\n    gyro.start();\r\n  } catch(error) {console.log(\"gyroscope not found\");}\r\n  \r\n  try {\r\n    accl = new window.Accelerometer({frequency: 60});\r\n    accl.addEventListener('reading', () => {\r\n      console.log(\"Accelerometer xyz:\", accl.x, accl.y, accl.z);\r\n    });\r\n    accl.start();\r\n  } catch(error) {console.log(\"accelerometer not found\");}\r\n\r\n  console.log(accl, gyro);\r\n\r\n  useEffect(() => {\r\n    mapboxgl.accessToken = process.env.REACT_APP_MAPBOX_KEY;\r\n    const initializeMap = async ({ setMap, mapContainer }) => {\r\n      await getAllPermissions();\r\n      const map = new mapboxgl.Map({\r\n        container: mapContainer.current,\r\n        style: \"mapbox://styles/mapbox/streets-v11\", // stylesheet location\r\n        center: [10.408773, 63.422091],\r\n        zoom: 10\r\n      });\r\n\r\n      map.on(\"load\", () => {\r\n        setMap(map);\r\n        map.resize();\r\n      });\r\n    };\r\n\r\n    if (!map) initializeMap({ setMap, mapContainer });\r\n  }, [map]);\r\n\r\n  return <div id=\"map\" ref={el => (mapContainer.current = el)} style={styles} />;\r\n};\r\n\r\nexport default MapboxGLMap;","import React from \"react\";\r\nimport Header from \"./components/Header\";\r\nimport MapboxGLMap from \"./components/MapboxGLMap\";\r\n\r\nconst styles = {\r\n  overflow:'hidden'\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <div style={styles}>\r\n      <Header/>\r\n      <MapboxGLMap />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}